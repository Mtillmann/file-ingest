var e=class{defaultOptions={target:document.documentElement,accept:"*/*",paste:!0,drop:!0,change:!0,preventDefault:!0,dragClasses:{dragover:"file-ingest-dragover",dragenter:"file-ingest-dragenter",dragleave:"file-ingest-dragleave",drop:"file-ingest-drop"},ignorePasteOnInput:!0,eventPrefix:"file-ingest",applyDragClasses:!0,eventTarget:null,callback:null,includeRejectedFiles:!1,emitWhenEmpty:!1};target;eventTarget;options;acceptedMimeTypes;constructor(e={}){if(this.options={...this.defaultOptions,...e},"string"==typeof this.options.target?this.target=document.querySelector(this.options.target):this.target=this.options.target,!this.target)throw new Error("FileIngest: target not found");if("string"==typeof this.options.eventTarget?this.eventTarget=document.querySelector(this.options.eventTarget):this.options.eventTarget instanceof HTMLElement?this.eventTarget=this.options.eventTarget:this.eventTarget=this.target,!this.eventTarget)throw new Error("FileIngest: eventTarget not found");this.acceptedMimeTypes=this.expandAcceptedMimeTypes(this.options.accept);for(const e in this.options.dragClasses)"string"==typeof this.options.dragClasses[e]&&(this.options.dragClasses[e]=[this.options.dragClasses[e]]);this.options.paste&&this.registerPasteHandler(),this.options.drop&&this.registerDropHandler(),this.options.change&&this.registerChangeHandler()}expandAcceptedMimeTypes(e="*/*"){return"*/*"===e?{"*":["*"]}:e.split(/\s*,\s*/).map((e=>e.split("/"))).reduce(((e,t)=>{const[s,r]=t;return e[s]||(e[s]=[]),e[s].push(r),e[s].includes("*")&&(e[s]=["*"]),e}),{})}dragenterHandler=e=>{this.options.preventDefault&&e.preventDefault(),this.options.applyDragClasses&&this.target.classList.add(...this.options.dragClasses.drop)};dragoverHandler=e=>{this.options.preventDefault&&e.preventDefault(),e.dataTransfer.dropEffect="copy",this.options.applyDragClasses&&this.target.classList.add(...this.options.dragClasses.dragover)};dragleaveHandler=e=>{this.options.preventDefault&&e.preventDefault(),this.options.applyDragClasses&&(this.target.classList.remove(...this.options.dragClasses.dragenter),this.target.classList.remove(...this.options.dragClasses.dragover))};dropHandler=e=>{this.options.preventDefault&&e.preventDefault(),this.options.applyDragClasses&&(this.target.classList.remove(...this.options.dragClasses.dragenter),this.target.classList.remove(...this.options.dragClasses.dragover));const t=[...e.dataTransfer.files];if(t.length>0)return this.handleFiles(t)};changeHandler=e=>{const t=e.target;if(!t.files||!t.getAttribute("type")||"file"!==t.getAttribute("type"))return;this.options.preventDefault&&e.preventDefault();const s=[...t.files];return s.length>0?this.handleFiles(s):void 0};pasteHandler=e=>{if(this.options.ignorePasteOnInput&&e.target&&(e.target.matches("input, textarea")||"true"===e.target.getAttribute("contenteditable")))return;this.options.preventDefault&&e.preventDefault();const t=[...e.clipboardData.items].reduce(((e,t)=>("file"===t.kind&&e.push(t.getAsFile()),e)),[]);return t.length>0?this.handleFiles(t):void 0};registerPasteHandler(){document.addEventListener("paste",this.pasteHandler)}unregisterPasteHandler(){document.removeEventListener("paste",this.pasteHandler)}registerDropHandler(){this.target.addEventListener("dragenter",this.dragenterHandler),this.target.addEventListener("dragover",this.dragoverHandler),this.target.addEventListener("dragleave",this.dragleaveHandler),this.target.addEventListener("drop",this.dropHandler)}unregisterDropHandler(){this.target.removeEventListener("dragenter",this.dragenterHandler),this.target.removeEventListener("dragover",this.dragoverHandler),this.target.removeEventListener("dragleave",this.dragleaveHandler),this.target.removeEventListener("drop",this.dropHandler)}registerChangeHandler(){this.target.addEventListener("change",this.changeHandler)}unregisterChangeHandler(){this.target.removeEventListener("change",this.changeHandler)}handleFiles(e){const t={files:[],rejected:[]};for(const s of e){if(this.acceptedMimeTypes["*"]){t.files.push(s);continue}const[e,r]=s.type.split("/");this.acceptedMimeTypes[e]&&(this.acceptedMimeTypes[e].includes(r)||this.acceptedMimeTypes[e].includes("*"))?t.files.push(s):t.rejected.push(s)}(0!==t.files.length||this.options.emitWhenEmpty)&&(this.options.includeRejectedFiles||delete t.rejected,this.eventTarget.dispatchEvent(new CustomEvent(`${this.options.eventPrefix}:files`,{detail:t})),this.options.callback&&this.options.callback(t))}destroy(){this.options.paste&&this.unregisterPasteHandler(),this.options.drop&&this.unregisterDropHandler(),this.options.change&&this.unregisterChangeHandler()}};export{e as default};
